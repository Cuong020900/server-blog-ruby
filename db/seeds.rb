Post.create!([
  {title: "Bạn đã biết các tips này khi làm việc với chuỗi trong JavaScript chưa ?", content: "Hi xin chào các bạn, tiếp tục chuỗi chủ đề về cái thằng JavaScript này, hôm nay mình sẽ giới thiệu cho các bạn một số thủ thuật hay ho khi làm việc với chuỗi trong JavaScript có thể bạn đã hoặc chưa từng dùng. Cụ thể như nào thì hãy cùng mình tìm hiểu trong bài viết này nhé (go)\n\n![](https://images.viblo.asia/6611729b-963a-4846-9fd5-0f74804be878.png)\n\n### 1. Sao chép một chuỗi nhiều lần\n\nThay vì phải gõ 1 chuỗi lặp đi lặp lại thì bạn có thể sử dụng method `.repeat()`.\n\nPhương thức `repeat()` xây dựng và trả về một chuỗi mới chứa số lượng nhất định bản sao chép của chuỗi được gọi tới và nối chung với nhau.\n\n```js\nconst laughing = \"ha\".repeat(3);\nconsole.log(laughing); // \"hahaha\"\n```\n\n### 2. Chèn thêm ký tự vào chuỗi với một độ dài cụ thể cho trước\n\nTrường hợp này bạn sẽ thường hay gặp nếu muốn mã hoá số điện thoại hoặc mã thẻ bằng việc sử dụng 2 method `padStart()` và `padEnd()`. Cụ thể bạn quan sát ví dụ sau để hình dung ra chức năng của nó\n\n```js\n// thêm dấu * tính từ đầu chuỗi cho đến khi đủ 8 ký tự\nconst eightBitsStart = \"001\".padStart(8, \"*\");\nconsole.log(eightBitsStart); // \"*****001\"\n\n// thêm dấu * tính từ cuối chuỗi cho đến khi đủ 8 ký tự\nconst eightBitsEnd = \"001\".padEnd(8, \"*\");\nconsole.log(eightBitsEnd); // \"001*****\"\n```\n\n### 3. Biến string thành array\n\nSử dụng `spread operator` giúp bạn có thể dễ dàng biến string thành array trong 1 nốt nhạc\n\n```js\nconst word = \"apple\";\nconst characters = [...word];\nconsole.log(characters); // [\"a\", \"p\", \"p\", \"l\", \"e\"]\n```\n\n### 4. Đếm số ký tự trong chuỗi\n\nRất đơn giản, sử dụng `length` là xong\n```js\nconst word = \" apple \";\nconsole.log(word.length); // 7\n```\nÀ mà từ từ quay xe đã, sao nó lại ra như này nhỉ =))\n\n```js\nconst word = \"𩸽\";\nconsole.log(word.length); // 2\n```\n\nCó thể giải thích như sau: JS đại diện cho hầu hết các ký tự dưới dạng điểm mã 16 bit. Tuy nhiên, một số ký tự nhất định được biểu diễn dưới dạng hai (hoặc nhiều) điểm mã 16 bit, được gọi là các cặp thay thế . Nếu bạn đang sử dụng `length`, JS sẽ cho bạn biết có bao nhiêu điểm mã được sử dụng. Do đó, nó 𩸽 bao gồm hai điểm mã và trả về một giá trị không chính xác.\n\nĐể giải quyết vấn đề này, bạn sẽ cần nhét nó vào array và lấy length của array\n\n```js\nconst word = \"𩸽\";\nconst characters = [...word];\nconsole.log(characters.length); // 1\n```\n\n### 5. Đảo ngược một chuỗi\n\nCũng lại cần đến anh array này 1 chút =))\n\n```js\nconst word = \"apple\";\nconst reversedWord = [...word].reverse().join(\"\");\nconsole.log(reversedWord); // \"elppa\"\n```\n\n### 6. Viết hoa chữ cái đầu\n\nĐể làm được điều này thì CSS chỉ cần 1 dòng, còn JS thì cần mấy dòng đây\n\n```js\nlet word = \"apple\";\nword = word[0].toUpperCase() + word.substr(1);\nconsole.log(word); // \"Apple\"\n```\n\nCách dài hơn nhưng an toàn hơn (bạn có thể xem lại **#4** để hiểu issue)\n\n```js\nlet word = \"apple\";\nconst characters = [...word];\ncharacters[0] = characters[0].toUpperCase();\nword = characters.join(\"\");\n\nconsole.log(word); // \"Apple\"\n```\n\n### 7. Viết hoa chữ cái đầu tiên của mỗi từ\n\n```js\nconst capitalizeEveryWord = str => str.replace(/\\b[a-z]/g, char => char.toUpperCase());\n\ncapitalizeEveryWord('hello world!'); // \"Hello World!\"\n```\n\n### 8. Chia nhỏ chuỗi dựa theo một nhóm ký tự\n\nĐể làm được điều này bạn sẽ cần kết hợp `split()` và biểu thức regex để xác định sẽ chia chuỗi theo nhóm ký tự nào.\n\nXem ví dụ sau để hiểu rõ hơn\n\n```js\nconst list = \"apples,bananas;cherries\";\nconst fruits = list.split(/[,;]/); // chia chuỗi dựa trên \",\" và \";\"\nconsole.log(fruits); // [\"apples\", \"bananas\", \"cherries\"]\n```\n\n### 9. Kiểm tra sự tồn tại của \"chuỗi trong chuỗi\"\n\nRất đơn giản, bạn có thể sử dụng `includes()`\n\n```js\nconst text = \"Hello, world! My name is Kai!\"\nconsole.log(text.includes(\"Kai\")); // true\n```\n\n### 10. Kiểm tra chuỗi bắt đầu/kết thúc bằng 1 chuỗi\n\n```js\nconst text = \"Hello, world! My name is Kai!\"\nconsole.log(text.startsWith(\"Hello\")); // true\nconsole.log(text.endsWith(\"world\")); // false\n```\n\n### 11. Thay thế toàn bộ sự xuất hiện của từ trong chuỗi\n\nKhi nghe đến bài toán này đa phần chúng ta sẽ nghĩ đến regex dạng\n\n```js\nconst text = \"I like apples. You like apples.\"\n\nconsole.log(text.replace(/apples/g, \"bananas\"));\n// \"I like bananas. You like bananas.\"\n```\n\nTuy nhiên, trong các string method cũng có 1 method làm được điều tương tự\n\n```js\nconst text = \"I like apples. You like apples.\"\n\nconsole.log(text.replaceAll(\"apples\", \"bananas\"));\n// \"I like bananas. You like bananas.\"\n```\n\n### 12. Xoá thẻ HTML ra khỏi chuỗi\n\n```js\nconst stripHTMLTags = str => str.replace(/<[^>]*>/g, '');\n\nstripHTMLTags('<p><em>lorem</em> <strong>ipsum</strong></p>'); // 'lorem ipsum'\n```\n\n### 13. Sắp xếp các ký tự trong chuỗi theo thứ tự bảng chữ cái\n\n```js\nconst sortCharactersInString = str => [...str].sort((a, b) => a.localeCompare(b)).join('');\n\nsortCharactersInString('cabbage'); // 'aabbceg'\n```\n\n### Kết luận\nTrên đây là 1 vài đoạn snippet nho nhỏ nhưng có võ mình tin rằng sẽ giúp ích cho bạn rất nhiều trong quá trình làm việc với js.\n\nNếu thấy bài viết hay, hãy cho mình +1 upvote nhé. Nếu thích mình hãy nhấn nút follow để biết thêm nhiều thứ hay ho hơn. Chúc bạn thành công !", published: true, cuid: 1, view: 56},
  {title: "Xây dựng blog cá nhân đảm bảo RẺ-ĐẸP-NHANH-BỀN.👍", content: "Hi các bạn, mình là Hoàng đây, vẫn là mình sau 1 thời gian ăn no ngủ kĩ sau tết. Giờ ngoi lên xem công nghệ thế giới chuyển biến thế nào rồi\n\nChẳng là, mình có 1 con blog viết bằng Rails, nhưng vì nghèo, nên không có tiền chạy vps => Đã đến lúc phải làm điều gì đó cho đứa con tinh thần của mình rồi\nOkay, let start :grinning::grinning:\n\nĐầu tiên, đối với mình hiện tại, thì tiêu chí của mình đối với 1 con blog là\n1. Chi phí chạy nó rẻ nhất có thể(~~dành cho bác nào nghèo như mình~~)\n2. Tốc độ truy cập trang nhanh\n3. Viết thêm một bài mới đơn giản\n\nÝ nghĩ đầu tiên lóe lên trong đầu mình là **github pages**, vâng, github pages - Cái thứ mà ít nhất mỗi dev đều thử nó một lần, thấy được một cái trang web của mình làm ra nhanh chóng, tiện lợi thì đều rất thích thú mà :heart_eyes::heart_eyes:\n\nĐối với thằng github pages thì thậm chí bạn chẳng phải mất tiền thuê vps hay hosting nữa, trang github pages của bạn sẽ bất tử(~~cho đến khi nào github bỏ tính năng này thì thôi~~ :) )\n\nOk đã xong được thằng **tiêu chí 1** rồi. Khổ nỗi, mình lại là thằng chúa lười(may mà vẫn có người yêu). Giờ nghĩ, lại code lại như con rails blog trước thì thôi cũng quá tôi => Nhanh trí nghĩ ngay ra dùng các theme mà github pages hỗ trợ. Việt Nam nói là làm, nhanh tay lấy ~~cuộn giấy~~ bàn phím gõ gõ vào việc ngay. Sau 1 hồi tìm kiếm thì thấy thằng github pages nó chỉ support luôn **Jekyll** thôi, mà mấy cái template của thằng này lại xấu xí quá trong khi đó tính mình yêu cái đẹp, thích màu hồng nên phải đi đường khác rồi.\n\n![](https://images.viblo.asia/9cf35a73-ccde-429a-97ef-e9def1efeb30.png)\n\nTiếp tục công cuộc tìm với tiêu chí 2. Mình nghĩ ngay đến mấy cái static pages đang thịnh hành cho việc viết blog đơn giản. Nhanh tay, tìm ngay vài thằng cộm cán như sau\n1. [HUGO](https://gohugo.io/)\n2. [GatsbyJS](https://www.gatsbyjs.com/)\n3. [Vuepress](https://vuepress.vuejs.org/) \n\nCòn vài thanh niên nữa nhưng nổi lên nhất là 3 cháu này, xịn xò, theme thì không thiếu. Nhưng cá nhân mình lại là con nghiện của VueJS thế mới chết, nên đành ngậm ngùi chia tay 2 em *HUGO* và *Gastby* mà chọn **Vuepress** thôi. Nói thật ra là quen tay dùng VueJS nên có gì còn có thể kịp trở tay được :). \n\n*Note: Bạn nào quen dùng react thì nên dùng [GatsbyJS](https://www.gatsbyjs.com/). Thằng này cũng khá xịn xò tay to các thứ các thứ đấy*\n\nQua quá trình tìm kiếm qua thằng bạn thân **google**, thì mình chốt được 2 cái\n1. Dùng github pages\n2. Dùng Vuepress\n\nLoanh quanh 1 hồi thì đúng là vuepress không làm mình thất vọng, template của thằng này thì nói thật không thiếu, bạn chỉ cần chọn cái thích hợp với mình thôi. Việc còn lại để vuepress lo :joy::joy:\n\n*Note: Các bạn có thể tham khảo thêm các* [*theme của vuepress ở đây nhé*](https://github.com/vuepress/awesome-vuepress#community-themes) \n\nThêm nữa là việc viết 1 bài mới đối với những thằng kể trên là dùng **markdown** nhé, rất quen thuộc với mọi dev, và có thể tha hồ đăng bài ở các diễn đàn khác nhau(vì cơ bản giờ toàn dùng md để viết mà). Đối với bản thân mình thì khá dễ sử dụng :heart_eyes::heart_eyes:\n\nOkay, bắt tay vào xây dưng blog của mình thoai nào(Sau khi đã chọn đươc vuepress làm điểm tựa :) )\n\n1. Instal Vuepress\n2. Chọn theme\n3. Kiểm tra thành quả\n4. Deploy to Github Pages\n5. Setup Auto build\n6. Các vấn đề khác\n\n## Instal Vuepress\nCác bạn cứ tham khảo [trang chủ](https://vuepress.vuejs.org/guide/#how-it-works) của nó là ra ngay ý mà \n```js\n// https://vuepress.vuejs.org/guide/getting-started.html#prerequisites\n\nyarn create vuepress-site\n```\n![](https://images.viblo.asia/d3477cf6-4268-44c6-970d-c71f04c0b859.png)\n\nOK chạy thử phát xem nó dư nào nào\n\n```js\nyarn install\nyarn run dev\n```\n![](https://images.viblo.asia/264c0bfb-e9ac-4350-8702-a0ce16d2b5b6.png)\n![](https://images.viblo.asia/fd0c3afe-aa7f-4b3e-a000-0e15a45be45a.png)\n\nKết quả luôn\n\n![](https://images.viblo.asia/2c7c6bf2-b3c4-4b63-ba43-c6b115c03028.png)\n\nRa luôn, vâng ra luôn, rất nhanh ae ạ, nói chung là hịn hò\n\n## Chọn theme\n\nMình là người yêu cái đẹp thích màu hồng, mình không hài lòng với cái theme mặc định này lắm, nghĩ bụng, phải làm sao để cho nó đẹp hơn thôi, chứ cứ thế này không được.\n\nMình là người Việt Nam, mà Việt Nam nói là làm, không chần chừ lên ngày [awesome-vuepress](https://github.com/vuepress/awesome-vuepress#community-themes) để kiếm theme cho em nó. Sau nhiều hồi lựa chọn giữa các em với nhau, mình đã chọn được 1 em khá vừa lòng là em [này ](https://github.com/ttskch/vuepress-theme-blog-vuetify/)  - Và chính nó cũng thành blog của mình luôn :heart_eyes::heart_eyes::heart_eyes:\n\n![](https://images.viblo.asia/a1d38ad6-b393-44b6-9efb-18eda9bdbbe4.png)\n\nChọn được rồi thì cài đặt thôi nhể :)\nhttps://github.com/ttskch/vuepress-theme-blog-vuetify/\n\n```js\n$ yarn add --dev vuepress-theme-blog-vuetify\n\n# or\n$ npm install -D vuepress-theme-blog-vuetify\n```\n\nSử dụng\n\n```js\n// .vuepress/config.js\nmodule.exports = {\n  theme: 'blog-vuetify',\n  themeConfig: {\n    // ...\n  }\n}\n```\nĐơn giản như đan rổ, làm ngay và luôn\n\n## Kiểm tra thành quả\nSau vài hồi config các thứ, run ***localhost:8080*** và mình đã có được cái blog như hiện tại trên kia kìa :)\n\n\n##  Deploy to Github Pages\nĐến đây thì về cơ bản là đã xong rồi, làm thêm vài bước config nữa thôi\n1. Tạo repo github, để public nhé(public mới vào việc với github pages được)\n2. Push code lên thôi\n3. Setting gh-pages\n\n## Setup Auto build\n\nĐến đây thì lại nảy sinh một vấn đề là, ơ thế code mình như này, github pages chơi thế éo nào được, nào là **md**, nào là **package.js**  :)\n\n=> Chúng ta cần phải build nó trước khi push lên github thôi. Mà vốn bản tính lười, chẳng nhẽ lần nào viết xong bài mới là lại build à, chán. Nghĩ ngay đến **github actions** => một công nghệ mà mới đây(~~chẳng qua lâu rồi mà mình không hay dùng~~) mới tích hợp vào github. Nhanh tay search ngay làm sao tự động build vuepress cho github pages. Ui xời, quả là trời không phụ lòng người, ra ngay được https://github.com/marketplace/actions/vuepress-deploy. Thôi là lại một nốt nhạc nữa :))\n\nTest ngay cho nóng\n\n![](https://images.viblo.asia/a8958a1b-fd28-48b5-8268-809c5896beb7.png)\n\nNgon luôn, bật ngay github pages check thôi, và thành quả đơn giản là https://hoangpn.com/\n\n![](https://images.viblo.asia/a1d38ad6-b393-44b6-9efb-18eda9bdbbe4.png)\n\n## Các vấn đề khác\nSơ sơ là thế, các bạn có thể nắm được và bắt tay xây dựng web được rồi. Tuy nhiên có 1 số lưu ý sau\n#### Đối với việc setup token cho auto_deploy\n```yml\nname: Deploy to GH Pages\non: [push]\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: Build and Deploy\n      uses: jenkey2011/vuepress-deploy@dev\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: hoangpn256/hoangpn.github.io\n        TARGET_BRANCH: gh_pages\n        BUILD_SCRIPT: yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n```\nĐể ý rằng có biến `secrets.ACCESS_TOKEN` -> đây là access token của tài khoản github của bạn. Để lấy được nó hãy làm theo hướng dẫn sau [đây](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-organization) \n\n#### Đối với việc chia thư mục viết bài\nCác bạn có thể tham khảo cấu trúc và config ở [repo của mình](https://github.com/hoangpn256/hoangpn.github.io).\n\nLưu ý các bài viết sắp xếp theo phần `date`\n\n![](https://images.viblo.asia/d22940cc-aacf-4034-bd1a-d82877b11c60.png)\n\n#### Đối với vấn đề setup domain cho github pages\n\nThêm file CNAME vào phần public trong source code\n\n![](https://images.viblo.asia/7f618ceb-598a-49d7-b044-977c9ca627c9.png)\n\nThêm CNAME nếu bạn dùng sub-domain của mình cho github pages, hoặc A-record nếu bạn dùng chính domain của mình cho gh-pages\n\nCó thể tham khảo thêm tại [đây](https://docs.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site)\n\n![](https://images.viblo.asia/54d70f6c-4af4-4186-98d6-aacd189517e0.png)\n\n![](https://images.viblo.asia/fec49e62-7627-49dc-8d78-2cc659ed6ea2.png)\n\nTrên đây là cấu hình của mình\n\n## Kết\n\nOkay, cơ bản thế là xong rồi đấy, chốt lại 1 số vấn đề như sau\n1. Dùng vuepress để xây dựng blog\n2. Dùng github pages để host đến chết :)\n3. Dùng github actions để auto build\n4. Một số cấu hình về github pages và config của dự án cần lưu ý(tham khảo repo của minh nhé - nhớ start nha :heart_eyes::heart_eyes: )\n\nNêu có bất kì thắc mắc gì cần giải đáp, hoặc góp ý cho mình, thì hãy comment ở dưới nhé. Cảm ơn các bạn đã đọc bài viết đến đây.\n\nỦng hộ mình với bài viết gốc [tại đây](https://hoangpn.com/post/xay-dung-blog-voi-vuepress/) \n\n___\n@hoangpn - Better every day!", published: true, cuid: 1, view: 20},
  {title: "Hello world!!!", content: "**Hello world!!!**", published: true, cuid: 4, view: 10}
])
User.create!([
  {username: "cuong@gmail.com", name: "Tran Quoc Cuong", password_digest: "$2a$12$H97Cduls/h.GMywpGDSVD.eHIdg7fLPMyAzLaZP.jLYdoVdsy/sJa", avatar: "https://i.gadgets360cdn.com/large/tom_and_jerry_paris_crop_1605590371930.jpg?downsize=950:*&output-quality=80", address: nil},
  {username: "cuong11@gmail.com", name: "Cuong Tran", password_digest: "$2a$12$hKN47rAhrpeG6Ecd.lFfl.f.d0WRpAy1GYLvyHRSjlKXFQ.8a1y7m", avatar: nil, address: nil},
  {username: "cuong111@gmail.com", name: "Cuong Pro", password_digest: "$2a$12$od3jtS0Lw9GKgc3kov067.A6yGVNdD4QhfXva6jzhYEBB7FbxVO7K", avatar: "https://i.gadgets360cdn.com/large/tom_and_jerry_paris_crop_1605590371930.jpg?downsize=950:*&output-quality=80", address: nil},
  {username: "hola@vnu.edu.vn", name: "VNU", password_digest: "$2a$12$TULUfTpni4Jyw.nEiC170Ob0jMkUTkJaNStxZ1dfXBR9YeVlxWdNi", avatar: "https://cdnmedia.thethaovanhoa.vn/Upload/B0g2ZnIe48e9au7dkcAV3w/files/000039/0000000000000000000211/00000262/00026/0019/001/00012/01/8/hyuna-3%20top.jpg", address: nil}
])
